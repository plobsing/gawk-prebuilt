common --enable_platform_specific_config

# Determines whether C++ binaries will be linked dynamically, interacting with the linkstatic attribute on build rules.
# off: Links all targets in mostly static mode. If -static is set in linkopts, targets will change to fully static.
common --dynamic_mode=off

# Don't clobber bazel-out/[platform]/bin
common --experimental_platform_in_output_dir

# On Linux (targetting linux and macos) use the zig toolchain from hermetic_cc_toolchain
common:linux --platforms @zig_sdk//libc_aware/platform:linux_amd64_musl
common:linux --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
common:linux --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
common:linux --host_action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# On Windows, use the host toolchain
# NB: after https://github.com/uber/hermetic_cc_toolchain/pull/190 is included in a release,
# this flag should no longer be needed.
common:windows --noincompatible_enable_cc_toolchain_resolution

common --incompatible_strict_action_env

common --features=thin_lto
# ThinLTO feature doesn't exist in Zig toolchain, so we must set the flags manually.
# It also doesn't support LTO on darwin targets, so we can't set this globally.
# Instead, we configure copt/linkopt inside the toolchain itself (with a WORKSPACE patch).
#common --copt -flto=thin

# Compilation Flags for zig-cc
common --compilation_mode=opt --strip=always
common:linux --copt -ffunction-sections
common:linux --copt -fdata-sections
